import{_ as s,c as n,o as a,a as l}from"./app.7470d725.js";const u=JSON.parse('{"title":"Node 镜像部署项目","description":"","frontmatter":{},"headers":[{"level":2,"title":"基础信息","slug":"基础信息","link":"#基础信息","children":[]},{"level":2,"title":"Nginx 服务配置","slug":"nginx-服务配置","link":"#nginx-服务配置","children":[]},{"level":2,"title":"项目构建","slug":"项目构建","link":"#项目构建","children":[]},{"level":2,"title":"使用 Docker","slug":"使用-docker","link":"#使用-docker","children":[]},{"level":2,"title":"使用 Docker Compose","slug":"使用-docker-compose","link":"#使用-docker-compose","children":[{"level":3,"title":"代码更新时","slug":"代码更新时","link":"#代码更新时","children":[]},{"level":3,"title":"多环境支持","slug":"多环境支持","link":"#多环境支持","children":[]}]},{"level":2,"title":"Reference","slug":"reference","link":"#reference","children":[{"level":3,"title":"Docker Compose 命令","slug":"docker-compose-命令","link":"#docker-compose-命令","children":[]}]}],"relativePath":"docker/deploy-frontend.md","lastUpdated":1673602495000}'),p={name:"docker/deploy-frontend.md"},e=l(`<h1 id="node-镜像部署项目" tabindex="-1">Node 镜像部署项目 <a class="header-anchor" href="#node-镜像部署项目" aria-hidden="true">#</a></h1><p>最简单部署方式请参考<a href="#%E9%A1%B9%E7%9B%AE%E6%9E%84%E5%BB%BA">项目构建</a> 。</p><nav class="table-of-contents"><ul><li><a href="#基础信息">基础信息</a></li><li><a href="#nginx-服务配置">Nginx 服务配置</a></li><li><a href="#项目构建">项目构建</a></li><li><a href="#使用-docker">使用 Docker</a></li><li><a href="#使用-docker-compose">使用 Docker Compose</a><ul><li><a href="#代码更新时">代码更新时</a></li><li><a href="#多环境支持">多环境支持</a></li></ul></li><li><a href="#reference">Reference</a><ul><li><a href="#docker-compose-命令">Docker Compose 命令</a></li></ul></li></ul></nav><h2 id="基础信息" tabindex="-1">基础信息 <a class="header-anchor" href="#基础信息" aria-hidden="true">#</a></h2><ul><li>项目目录：<code>/data/www/react-frontend</code></li><li>可访问目录：<code>/data/www/react-frontend/dist</code></li><li>访问路径：<code>http://test.react-frontend.com</code>（仅做示例参考：<a href="http://xn--eqrr7hhq3a.xn--5mq5a271a45m734a.com" target="_blank" rel="noreferrer">环境名.代码仓库名.com</a>）</li><li>Nginx 容器映射：<code>/data/www:/data/www</code>（本地：容器，假设已存在）</li><li>Node 容器映射：<code>&quot;$PWD:/data/www&quot;</code>（本地当前目录：容器）</li></ul><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>运用至实际项目中，请注意根据实际情况更改以上信息。</p></div><h2 id="nginx-服务配置" tabindex="-1">Nginx 服务配置 <a class="header-anchor" href="#nginx-服务配置" aria-hidden="true">#</a></h2><p>对于静态站点来说，该服务仅需配置一次。</p><p>假设 Nginx 配置文件在目录<code>/etc/nginx/conf.d</code>下，编辑/新建该项目的 nginx 配置文件<code>react-frontend.conf</code>：</p><div class="language-nginx line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">nginx</span><pre class="shiki"><code><span class="line"><span style="color:#FF79C6;">server</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">   </span><span style="color:#FF79C6;"> listen </span><span style="color:#F8F8F2;"> </span><span style="color:#BD93F9;">80</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#6272A4;"># 配置访问地址</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#6272A4;"># 这里配置了多个访问地址，多个访问地址请使用英文逗号隔开，请注意不要存在空格</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#6272A4;"># server_name 有最大字符长度限制，如 nginx 运行报错，请酌情留下需要的数据</span></span>
<span class="line"><span style="color:#F8F8F2;">   </span><span style="color:#FF79C6;"> server_name </span><span style="color:#F8F8F2;">test.react-frontend.com,pre.react-frontend.com,prod.react-frontend.com;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#6272A4;"># 配置错误日志地址</span></span>
<span class="line"><span style="color:#F8F8F2;">   </span><span style="color:#FF79C6;"> error_log </span><span style="color:#F8F8F2;">   /var/log/nginx/react-frontend.error.log;</span></span>
<span class="line"><span style="color:#F8F8F2;">   </span><span style="color:#FF79C6;"> access_log </span><span style="color:#F8F8F2;">  /var/log/nginx/react-frontend.access.log;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#6272A4;"># 可访问目录</span></span>
<span class="line"><span style="color:#F8F8F2;">   </span><span style="color:#FF79C6;"> root </span><span style="color:#F8F8F2;">   /data/www/dist;</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#FF79C6;">location</span><span style="color:#F8F8F2;"> / {</span></span>
<span class="line"><span style="color:#F8F8F2;">       </span><span style="color:#FF79C6;"> index </span><span style="color:#F8F8F2;">    index.html;</span></span>
<span class="line"><span style="color:#F8F8F2;">       </span><span style="color:#FF79C6;"> try_files </span><span style="color:#F8F8F2;">$uri $uri/ /index.html;</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#6272A4;"># 一些其他配置</span></span>
<span class="line"><span style="color:#F8F8F2;">   </span><span style="color:#FF79C6;"> gzip </span><span style="color:#F8F8F2;">on;</span></span>
<span class="line"><span style="color:#F8F8F2;">   </span><span style="color:#FF79C6;"> gzip_min_length </span><span style="color:#F8F8F2;">1k;</span></span>
<span class="line"><span style="color:#F8F8F2;">   </span><span style="color:#FF79C6;"> gzip_buffers </span><span style="color:#F8F8F2;">4 </span><span style="color:#BD93F9;">16k</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#6272A4;">#gzip_http_version 1.0;</span></span>
<span class="line"><span style="color:#F8F8F2;">   </span><span style="color:#FF79C6;"> gzip_comp_level </span><span style="color:#F8F8F2;">2;</span></span>
<span class="line"><span style="color:#F8F8F2;">   </span><span style="color:#FF79C6;"> gzip_types </span><span style="color:#F8F8F2;">text/plain application/x-javascript application/javascript text/css application/xml text/javascript application/x-httpd-php image/jpeg image/gif image/png;</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#6272A4;">#gzip_vary off;</span></span>
<span class="line"><span style="color:#F8F8F2;">   </span><span style="color:#FF79C6;"> gzip_disable </span><span style="color:#F1FA8C;">&quot;MSIE [1-6]\\.&quot;</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br></div></div><p>然后重启 Nginx 服务：</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki"><code><span class="line"><span style="color:#6272A4;"># 假设在 docker 中运行</span></span>
<span class="line"><span style="color:#F8F8F2;">$ docker </span><span style="color:#8BE9FD;">exec</span><span style="color:#F8F8F2;"> -it nginx sh</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6272A4;"># Nginx 容器内</span></span>
<span class="line"><span style="color:#F8F8F2;">$ nginx -t</span></span>
<span class="line"><span style="color:#F8F8F2;">$ nginx -s reload</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h2 id="项目构建" tabindex="-1">项目构建 <a class="header-anchor" href="#项目构建" aria-hidden="true">#</a></h2><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki"><code><span class="line"><span style="color:#6272A4;"># 进入项目根目录</span></span>
<span class="line"><span style="color:#F8F8F2;">$ </span><span style="color:#8BE9FD;">cd</span><span style="color:#F8F8F2;"> /data/www/react-frontend</span></span>
<span class="line"><span style="color:#6272A4;"># 拉取最新代码</span></span>
<span class="line"><span style="color:#F8F8F2;">$ git pull</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6272A4;"># 使用 Node 镜像打包 </span></span>
<span class="line"><span style="color:#F8F8F2;">$ docker run -it --rm -v </span><span style="color:#E9F284;">&quot;</span><span style="color:#BD93F9;">$PWD</span><span style="color:#F1FA8C;">:/www</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;"> -w </span><span style="color:#E9F284;">&quot;</span><span style="color:#F1FA8C;">/www</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;"> node:16.18.1 sh</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6272A4;"># 此时在 Node 容器内，请根据项目配置进行打包</span></span>
<span class="line"><span style="color:#6272A4;"># 假设当前环境为预发环境，打包命令为 yarn run build:pre</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6272A4;"># 配置 Yarn 淘宝镜像</span></span>
<span class="line"><span style="color:#F8F8F2;">$ yarn config </span><span style="color:#8BE9FD;">set</span><span style="color:#F8F8F2;"> registry https://registry.npmmirror.com/</span></span>
<span class="line"><span style="color:#6272A4;"># 配置忽略 SSL 严格模式，避免出现 self signed certificate in certificate chain 问题</span></span>
<span class="line"><span style="color:#F8F8F2;">$ yarn yarn config </span><span style="color:#8BE9FD;">set</span><span style="color:#F8F8F2;"> strict-ssl </span><span style="color:#8BE9FD;">false</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6272A4;"># 安装项目依赖</span></span>
<span class="line"><span style="color:#F8F8F2;">$ yarn install</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6272A4;"># 构建</span></span>
<span class="line"><span style="color:#F8F8F2;">$ yarn run build:pre</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6272A4;"># 以上过程无误后可退出 Node 容器</span></span>
<span class="line"><span style="color:#6272A4;"># 浏览器访问 http://test.react-frontend.com 查看是否为最新版本</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br></div></div><h2 id="使用-docker" tabindex="-1">使用 Docker <a class="header-anchor" href="#使用-docker" aria-hidden="true">#</a></h2><p>这里指使用一个 Dockerfile 来包揽所有部署，包括项目构建、打包和部署。最后只需要一个<code>docker run</code>命令自动完成所有操作。</p><div class="warning custom-block"><p class="custom-block-title">不推荐</p><p>当前 Dockerfile 将复制整个项目，如果项目依赖过多，构建时间将大大加长。</p><p>而如果通过<code>.dockerignore</code>文件来排除<code>node_modules</code>目录的复制，构建时<code>yarn install</code>安装依赖的过程又会很长。</p></div><p><a href="#%E9%A1%B9%E7%9B%AE%E6%9E%84%E5%BB%BA">项目构建</a>中的代码可汇总为以下 Dockerfile：</p><div class="language-docker line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">docker</span><pre class="shiki"><code><span class="line"><span style="color:#FF79C6;">FROM</span><span style="color:#F8F8F2;"> node:16.18.1</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">ARG</span><span style="color:#F8F8F2;"> ENV_RUNTIME=dev</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">WORKDIR</span><span style="color:#F8F8F2;"> /data/www</span></span>
<span class="line"><span style="color:#FF79C6;">COPY</span><span style="color:#F8F8F2;"> . /data/www</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">RUN</span><span style="color:#F8F8F2;"> set -ex \\</span></span>
<span class="line"><span style="color:#F8F8F2;">    &amp;&amp; npm -v \\</span></span>
<span class="line"><span style="color:#F8F8F2;">    &amp;&amp; yarn -v \\</span></span>
<span class="line"><span style="color:#F8F8F2;">    &amp;&amp; yarn config set registry </span><span style="color:#F1FA8C;">&quot;https://registry.npmmirror.com/&quot;</span><span style="color:#F8F8F2;"> \\</span></span>
<span class="line"><span style="color:#F8F8F2;">    &amp;&amp; yarn config set strict-ssl false \\</span></span>
<span class="line"><span style="color:#F8F8F2;">    &amp;&amp; yarn install \\</span></span>
<span class="line"><span style="color:#F8F8F2;">    &amp;&amp; npm run build:\${ENV_RUNTIME}</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span></span>
<span class="line"><span style="color:#6272A4;"># TODO 还差 Nginx</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><p>此时可以构建镜像：<code>docker build -t react-frontend .</code>， 打包时在项目根目录运行命令：<code>docker run -itd -v &quot;$PWD:/data/www&quot; react-frontend</code>即可。</p><h2 id="使用-docker-compose" tabindex="-1">使用 Docker Compose <a class="header-anchor" href="#使用-docker-compose" aria-hidden="true">#</a></h2><p>使用 Docker Compose 进行部署的优势之一就是<strong>可以使用目录映射来避免重复安装依赖或者大目录复制问题</strong>。</p><div class="tip custom-block"><p class="custom-block-title">不考虑使用 build</p><p>原想法是使用<code>build</code>指令来运用 Dockerfile，但使用 command 和 entrypoint 指令要更适合前端项目。 即便这两个命令不适用于执行过于复杂的命令（或者超过 2 个的命令），也可以使用 shell 脚本来实现。</p></div><p>参考<code>docker-compose.yml</code>如下：</p><div class="language-yaml line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki"><code><span class="line"><span style="color:#8BE9FD;">version</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> </span><span style="color:#E9F284;">&quot;</span><span style="color:#F1FA8C;">3.7</span><span style="color:#E9F284;">&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6272A4;"># Please refer to the official documentation:</span></span>
<span class="line"><span style="color:#6272A4;"># https://docs.docker.com/compose/compose-file/</span></span>
<span class="line"></span>
<span class="line"><span style="color:#8BE9FD;">networks</span><span style="color:#FF79C6;">:</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#8BE9FD;">default</span><span style="color:#FF79C6;">:</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#8BE9FD;">driver</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> </span><span style="color:#F1FA8C;">bridge</span></span>
<span class="line"></span>
<span class="line"><span style="color:#8BE9FD;">services</span><span style="color:#FF79C6;">:</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#8BE9FD;">nginx</span><span style="color:#FF79C6;">:</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#8BE9FD;">image</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> </span><span style="color:#F1FA8C;">nginx:1.22-alpine</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#8BE9FD;">ports</span><span style="color:#FF79C6;">:</span></span>
<span class="line"><span style="color:#F8F8F2;">      </span><span style="color:#FF79C6;">-</span><span style="color:#F8F8F2;"> </span><span style="color:#F1FA8C;">80:80</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#8BE9FD;">working_dir</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> </span><span style="color:#F1FA8C;">/data/www</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#6272A4;"># Nginx server 配置文件目录</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#6272A4;"># 假定在项目根目录下的 docs/deploy/conf.d</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#8BE9FD;">volumes</span><span style="color:#FF79C6;">:</span></span>
<span class="line"><span style="color:#F8F8F2;">      </span><span style="color:#FF79C6;">-</span><span style="color:#F8F8F2;"> </span><span style="color:#F1FA8C;">./docs/deploy/conf.d:/etc/nginx/conf.d/:rw</span></span>
<span class="line"><span style="color:#F8F8F2;">      </span><span style="color:#FF79C6;">-</span><span style="color:#F8F8F2;"> </span><span style="color:#F1FA8C;">.:/data/www</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#8BE9FD;">networks</span><span style="color:#FF79C6;">:</span></span>
<span class="line"><span style="color:#F8F8F2;">      </span><span style="color:#FF79C6;">-</span><span style="color:#F8F8F2;"> </span><span style="color:#F1FA8C;">default</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#8BE9FD;">node</span><span style="color:#FF79C6;">:</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#8BE9FD;">image</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> </span><span style="color:#F1FA8C;">node:16.18.1</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#8BE9FD;">working_dir</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> </span><span style="color:#F1FA8C;">/data/www</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#8BE9FD;">volumes</span><span style="color:#FF79C6;">:</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#FF79C6;">-</span><span style="color:#F8F8F2;"> </span><span style="color:#F1FA8C;">.:/data/www</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#6272A4;"># command 和 entrypoint 均只允许执行一条命令</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#6272A4;"># 二者结合可使用两条命令，更多命令可通过 shell 脚本实现</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#8BE9FD;">command</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> </span><span style="color:#F1FA8C;">yarn install</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#8BE9FD;">entrypoint</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> [</span><span style="color:#E9F284;">&quot;</span><span style="color:#F1FA8C;">npm</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">, </span><span style="color:#E9F284;">&quot;</span><span style="color:#F1FA8C;">run</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">, </span><span style="color:#E9F284;">&quot;</span><span style="color:#F1FA8C;">build:pre</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">]</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#8BE9FD;">networks</span><span style="color:#FF79C6;">:</span></span>
<span class="line"><span style="color:#F8F8F2;">      </span><span style="color:#FF79C6;">-</span><span style="color:#F8F8F2;"> </span><span style="color:#F1FA8C;">default</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br></div></div><p>以上配置文件在执行<code>docker-compose up -d</code>成功后，node 容器会自动退出（因为没有常驻进程），但想要的目的（**构建静态代码至<code>dist</code>目录）已经达成，node 容器是否存活不重要。</p><div class="tip custom-block"><p class="custom-block-title">Nginx</p><p>其中，文件<code>docs/deploy/conf.d/default.conf</code>可参考<a href="#Nginx-%E6%9C%8D%E5%8A%A1%E9%85%8D%E7%BD%AE">Nginx 服务配置</a></p></div><h3 id="代码更新时" tabindex="-1">代码更新时 <a class="header-anchor" href="#代码更新时" aria-hidden="true">#</a></h3><p>一旦项目代码进行更新，就需要重新打包<code>dist</code>目录。此时只需进入项目根目录，然后执行<strong>重启node容器</strong>的命令即可：</p><div class="language-shell line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki"><code><span class="line"><span style="color:#6272A4;"># 重启 node 服务</span></span>
<span class="line"><span style="color:#F8F8F2;">$ docker-compose restart node</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h3 id="多环境支持" tabindex="-1">多环境支持 <a class="header-anchor" href="#多环境支持" aria-hidden="true">#</a></h3><p>有多种方案。</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p><strong>推荐使用方案 2</strong>，不需要为多个环境配置多个分支。</p></div><h4 id="方案-1" tabindex="-1">方案 1 <a class="header-anchor" href="#方案-1" aria-hidden="true">#</a></h4><p>不同环境使用不同分支，例如<code>master</code>指向生产环境、<code>staging</code>指向预发环境、<code>dev</code>指向开发环境等。</p><p>不同分支仅<code>docker-compose.yml</code>文件不同（仅打包命令不同）。</p><p>如上<code>entrypoint: [&quot;npm&quot;, &quot;run&quot;, &quot;build:pre&quot;]</code>打包预发环境，那么<code>master</code>分支该项可变为：<code>entrypoint: [&quot;npm&quot;, &quot;run&quot;, &quot;build:prod&quot;]</code></p><p>具体修改可参考<code>package.json</code>文件配置。</p><h4 id="方案-2" tabindex="-1">方案 2 <a class="header-anchor" href="#方案-2" aria-hidden="true">#</a></h4><p>使用<code>docker-compose.yml.example</code>模板文件，在不同环境执行如下命令：</p><div class="language-shell line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki"><code><span class="line"><span style="color:#F8F8F2;">$ cp ./docker-compose.yml.example docker-compose.yml</span></span>
<span class="line"><span style="color:#6272A4;"># 进入 docker compose 文件并修改执行命令（如上）</span></span>
<span class="line"><span style="color:#F8F8F2;">$ vi docker-compose.yml</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h4 id="方案-3" tabindex="-1">方案 3 <a class="header-anchor" href="#方案-3" aria-hidden="true">#</a></h4><p>另有一个无需更改配置文件的方案：<strong>使用 node 镜像手动打包</strong>。</p><p>容器运行后，node 容器虽然 die 了，但镜像无需拉取，我们只需借助 node 镜像来完成自己需要的命令。</p><p>以上述方案为例，我们使用<code>node:16.18.1</code>镜像启动一个临时容器：</p><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>这里使用的是原镜像，而不是 docker compose 中的 node 容器！</p></div><div class="language-shell line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki"><code><span class="line"><span style="color:#6272A4;"># 进入 node 容器（使用 --rm 选项，容器退出后即删除该容器）</span></span>
<span class="line"><span style="color:#F8F8F2;">$ docker run -it --rm -v </span><span style="color:#E9F284;">&quot;</span><span style="color:#BD93F9;">$PWD</span><span style="color:#F1FA8C;">:/data/www</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;"> -w </span><span style="color:#E9F284;">&quot;</span><span style="color:#F1FA8C;">/data/www</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;"> node:16.18.1 sh</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6272A4;"># 此时成功进入到 node 容器，当前目录为项目根目录</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6272A4;"># 执行 build 命令（假设当前环境为开发环境，但是打包生产环境的代码）</span></span>
<span class="line"><span style="color:#F8F8F2;">$ npm run build:prod</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6272A4;"># 构建命令执行完成后，按下 Ctrl + D 后退出该容器</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>刷新页面，检查是否转为生产环境的代码。</p><h2 id="reference" tabindex="-1">Reference <a class="header-anchor" href="#reference" aria-hidden="true">#</a></h2><h3 id="docker-compose-命令" tabindex="-1">Docker Compose 命令 <a class="header-anchor" href="#docker-compose-命令" aria-hidden="true">#</a></h3><p>更多 docker compose 命令参考：<a href="https://docs.docker.com/compose/reference/" target="_blank" rel="noreferrer">https://docs.docker.com/compose/reference/</a></p><div class="language-shell line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki"><code><span class="line"><span style="color:#F8F8F2;">$ docker-compose up                         </span><span style="color:#6272A4;"># 创建并且启动所有容器</span></span>
<span class="line"><span style="color:#F8F8F2;">$ docker-compose up -d                      </span><span style="color:#6272A4;"># 创建并且后台运行方式启动所有容器</span></span>
<span class="line"><span style="color:#F8F8F2;">$ docker-compose up nginx node              </span><span style="color:#6272A4;"># 创建并且启动 nginx、node 的多个容器</span></span>
<span class="line"><span style="color:#F8F8F2;">$ docker-compose up -d nginx node           </span><span style="color:#6272A4;"># 创建并且已后台运行的方式启动 nginx、node 容器</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">$ docker-compose start node                  </span><span style="color:#6272A4;"># 启动服务</span></span>
<span class="line"><span style="color:#F8F8F2;">$ docker-compose stop node                   </span><span style="color:#6272A4;"># 停止服务</span></span>
<span class="line"><span style="color:#F8F8F2;">$ docker-compose restart node                </span><span style="color:#6272A4;"># 重启服务</span></span>
<span class="line"><span style="color:#F8F8F2;">$ docker-compose build node                  </span><span style="color:#6272A4;"># 构建或者重新构建服务</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">$ docker-compose rm node                     </span><span style="color:#6272A4;"># 删除并且停止 node 容器</span></span>
<span class="line"><span style="color:#F8F8F2;">$ docker-compose node                        </span><span style="color:#6272A4;"># 停止并删除容器，网络，图像和挂载卷</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div>`,52),o=[e];function r(c,i,t,F,d,b){return a(),n("div",null,o)}const m=s(p,[["render",r]]);export{u as __pageData,m as default};
