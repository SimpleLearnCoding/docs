import{_ as l,c as i,o as e,a as t}from"./app.62ccd090.js";const u=JSON.parse('{"title":"从《代码之丑》专栏了解好代码","description":"","frontmatter":{},"headers":[{"level":3,"title":"命名","slug":"命名","link":"#命名","children":[]},{"level":3,"title":"重复代码","slug":"重复代码","link":"#重复代码","children":[]},{"level":3,"title":"封装","slug":"封装","link":"#封装","children":[]},{"level":3,"title":"数据","slug":"数据","link":"#数据","children":[]},{"level":3,"title":"其他","slug":"其他","link":"#其他","children":[]}],"relativePath":"geektime/early-code.md","lastUpdated":1673508193000}'),o={name:"geektime/early-code.md"},a=t('<h1 id="从《代码之丑》专栏了解好代码" tabindex="-1">从《代码之丑》专栏了解好代码 <a class="header-anchor" href="#从《代码之丑》专栏了解好代码" aria-hidden="true">#</a></h1><blockquote><p>该部分笔记来自<a href="https://time.geekbang.org/dashboard/course" target="_blank" rel="noreferrer">极客时间</a>的<a href="https://time.geekbang.org/column/article/325594" target="_blank" rel="noreferrer">代码之丑</a> 专栏。时间原因仅作粗略总结。</p></blockquote><nav class="table-of-contents"><ul><li><a href="#命名">命名</a></li><li><a href="#重复代码">重复代码</a></li><li><a href="#封装">封装</a></li><li><a href="#数据">数据</a></li><li><a href="#其他">其他</a></li></ul></nav><blockquote><p>书籍推荐（来自评论区）：</p><ul><li>《你的灯亮着吗》</li></ul></blockquote><h3 id="命名" tabindex="-1">命名 <a class="header-anchor" href="#命名" aria-hidden="true">#</a></h3><ol><li><strong>描述意图，而非细节</strong>：描述出这段代码在做的事情。也需要避免使用<strong>技术术语</strong>命名（例如 bookList 使用了 List 类型，可以改为 books）。</li><li>精准表述，而不宽泛（宽泛案例：data、info、flag、process、handle、build、maintain、modify、manage）。</li><li><strong>建立团队的词汇表</strong>，让团队成员有信息可以参考——业务词汇表可同产品团队商讨确定。 <ol><li>一般包括：中文名称、英文表述、说明等信息。</li></ol></li><li>好的命名，是体现业务含义的命名。</li><li>函数名应该是<strong>动词结构</strong>，可以上<a href="https://dict.youdao.com/" target="_blank" rel="noreferrer">网易有道</a>查询同一词汇的不同形式，纠结时使用与业务相关性更高的那个。</li></ol><h3 id="重复代码" tabindex="-1">重复代码 <a class="header-anchor" href="#重复代码" aria-hidden="true">#</a></h3><ol><li>不要复制粘贴，如果需要复制粘贴，首先应该做的是<strong>提取一个新的函数出来，把公共的部分先统一掉</strong>。</li><li>写出长函数时，需要把各部分功能<strong>提取</strong>为小函数，做好关注点分离。</li><li>函数越短越好！！！</li><li>当一个类<strong>职责不单一</strong>时，就说明它该拆了。 <ol><li>字段分组</li><li>职责转移</li><li>类越小越好</li></ol></li><li>参数列表过长时，可以将相关参数封装成<strong>参数类</strong>。 <ol><li>如果一个函数过多地依赖其他类，需要考虑将其转移至依赖类。</li><li>参数列表中存在<strong>标记</strong>时，可将标记参数代表的不同路径拆分出来，分解为多个函数。</li><li>参数列表也是越小越好。</li></ol></li><li>在 if 结构中，应把<strong>最容易返回的情况写在最前面</strong>，即令函数<strong>尽早返回</strong>。 <ol><li>同时可避免使用多个 else</li><li>尽量避免写 else</li></ol></li><li>在 switch 结构中，可引入<strong>多态</strong>来取代条件表达式 <ol><li>将 case 判断封装为一个方法（例如获取用户等级）</li><li>然后将用户等级抽取为<strong>接口</strong>，不同等级实现该接口</li></ol></li></ol><h3 id="封装" tabindex="-1">封装 <a class="header-anchor" href="#封装" aria-hidden="true">#</a></h3><ol><li>声明完一个类的字段之后，请停下生成 getter 的手，转而让大脑开始工作，思考这个类应该提供的行为。</li><li>一个好的封装是需要基于行为的，所以，如果把视角再提升一个角度，我们应该考虑的问题是类应该提供哪些行为，而非简简单单地把数据换一种形式呈现出来。</li><li>不同层次的内容放入不同函数中。</li></ol><h3 id="数据" tabindex="-1">数据 <a class="header-anchor" href="#数据" aria-hidden="true">#</a></h3><ol><li>移除设值函数（Remove Setting Method）：消除 setXXX 函数</li><li>解决可变数据，还有一个解决方案是编写不变类。 <ol><li>所有的字段只在构造函数中初始化；</li><li>所有的方法都是纯函数；</li><li>如果需要有改变，返回一个新的对象，而不是修改已有字段。</li></ol></li><li><strong>实体对象要限制数据变化，而值对象就要设计成不变类。</strong></li><li>变量仅在开始使用时声明。</li><li>在类 MVC 结构中，通常 Controller 中获取的数据（例如根据登录 token 获取的用户ID），好像放在哪里（Controller 或 Service）都行，这导致了参数不明也不稳定 <ol><li>可以引入一个<strong>防腐层</strong>，将需要的参数封装起来，业务和内部接口隔离</li><li>引入模型，将业务和具体实现隔离</li></ol></li><li>业务代码中任何与业务无关的东西都是潜在的坏味道。</li><li>代码应该向着稳定的方向依赖。 <ol><li>高层不应依赖底层模块，二者均应依赖<strong>抽象</strong>。</li><li>抽象不应依赖细节，细节应依赖于抽象。</li></ol></li><li>空对象问题，不要忘记处理为空的情况——Java 8 有个 Optional 类型，PHP 可以考虑每次都抛出一个 EmptyException 异常。</li></ol><h3 id="其他" tabindex="-1">其他 <a class="header-anchor" href="#其他" aria-hidden="true">#</a></h3><ol><li>代码评审暴露的问题越多越好，频率越高越好。</li><li>代码评审角度： <ol><li>实现方案的正确性：尽可能考虑 Sad Path</li><li>算法正确性：是否会陷入死循环等</li><li>代码坏味道</li></ol></li><li>对外提供的接口越少越好——谨慎对待接口和实体的变动，多沟通，探索真实意图以及需求的必要性。</li><li>消除 static 函数 <ol><li>从本质上说，static 函数是一种全局函数，static 变量是一种全局变量，全局的函数和变量是我们尽量规避的</li><li>一个函数调用了 static 函数不好测试</li><li>除了写程序库，日常开发尽可能不用 static 函数</li></ol></li><li>如果一个接口只有一个实现类，可以命名为 DefaultXXX，而不是和接口同名。</li><li>先竭力把代码写到不需要用注释，而把注释当作最后的选择。</li></ol>',14),r=[a];function n(s,d,h,c,g,f){return e(),i("div",null,r)}const p=l(o,[["render",n]]);export{u as __pageData,p as default};
